#include <iostream>
#include "sc1.h"
using namespace std;

constexpr int distanceMap[SC_Nq][SC_Nq] = 
{{0, 1, 2, 3, 4, 5, 4, 3, 2, 1},
 {1, 0, 1, 2, 3, 4, 5, 4, 3, 2},
 {2, 1, 0, 1, 2, 3, 4, 5, 4, 3},
 {3, 2, 1, 0, 1, 2, 3, 4, 5, 4},
 {4, 3, 2, 1, 0, 1, 2, 3, 4, 5},
 {5, 4, 3, 2, 1, 0, 1, 2, 3, 4},
 {4, 5, 4, 3, 2, 1, 0, 1, 2, 3},
 {3, 4, 5, 4, 3, 2, 1, 0, 1, 2},
 {2, 3, 4, 5, 4, 3, 2, 1, 0, 1},
 {1, 2, 3, 4, 5, 4, 3, 2, 1, 0}};

constexpr int upMap[SC_L] =
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 0};
constexpr int downMap[SC_L] =
{10, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9};

constexpr int upperMap[SC_N] =
{ 
 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
   0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,
  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,
  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,
  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,
  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,
  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,  65,
  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,
  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,
  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98,
  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109
};
constexpr int lowerMap[SC_N] =
{ 
  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,  21,
  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,  32,
  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,
  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,
  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,  65,
  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,  76,
  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,  87,
  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,  98,
  99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109,
 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120,
   0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10
};
constexpr int leftMap[SC_N] =
{ 
   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  0, 
  12,  13,  14,  15,  16,  17,  18,  19,  20,  21, 11, 
  23,  24,  25,  26,  27,  28,  29,  30,  31,  32, 22, 
  34,  35,  36,  37,  38,  39,  40,  41,  42,  43, 33, 
  45,  46,  47,  48,  49,  50,  51,  52,  53,  54, 44, 
  56,  57,  58,  59,  60,  61,  62,  63,  64,  65, 55, 
  67,  68,  69,  70,  71,  72,  73,  74,  75,  76, 66, 
  78,  79,  80,  81,  82,  83,  84,  85,  86,  87, 77, 
  89,  90,  91,  92,  93,  94,  95,  96,  97,  98, 88, 
 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 99, 
 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 110
};
constexpr int rightMap[SC_N] =
{ 
   10,   0,   1,   2,   3,   4,   5,   6,   7,   8,   9,
   21,  11,  12,  13,  14,  15,  16,  17,  18,  19,  20,
   32,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31,
   43,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,
   54,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,
   65,  55,  56,  57,  58,  59,  60,  61,  62,  63,  64,
   76,  66,  67,  68,  69,  70,  71,  72,  73,  74,  75,
   87,  77,  78,  79,  80,  81,  82,  83,  84,  85,  86,
   98,  88,  89,  90,  91,  92,  93,  94,  95,  96,  97,
  109,  99, 100, 101, 102, 103, 104, 105, 106, 107, 108,
  120, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119
};

main(){
	SC_input();
	
	int pTile[SC_Nt+1][SC_N];
	int parentTile[SC_Nt+1][SC_N];
	for(int t = 0; t < SC_Nt+1; t++){
		for(int i = 0; i < SC_N; i++){
			pTile[t][i] = 100;
			parentTile[t][i] = -1;
		}
	}

	pTile[0][60] = 0;

	int pT;
	int q;

	for(int t = 0; t < SC_Nt; t++){
		for(int i = 0; i < SC_N; i++){
			pT = pTile[t][i];
			if(pT < 23){
				if(pTile[t+1][upperMap[i]] > (q = pT + distanceMap[SC_C[upperMap[i]]][SC_Cr[t+1]])){
					pTile[t+1][upperMap[i]] = q;
					parentTile[t+1][upperMap[i]] = i;
				}
				if(pTile[t+1][lowerMap[i]] > (q = pT + distanceMap[SC_C[lowerMap[i]]][SC_Cr[t+1]])){
					pTile[t+1][lowerMap[i]] = q;
					parentTile[t+1][lowerMap[i]] = i;
				}
				if(pTile[t+1][leftMap[i]] > (q = pT + distanceMap[SC_C[leftMap[i]]][SC_Cr[t+1]])){
					pTile[t+1][leftMap[i]] = q;
					parentTile[t+1][leftMap[i]] = i;
				}
				if(pTile[t+1][rightMap[i]] > (q = pT + distanceMap[SC_C[rightMap[i]]][SC_Cr[t+1]])){
					pTile[t+1][rightMap[i]] = q;
					parentTile[t+1][rightMap[i]] = i;
				}
			}
		}
	}
	int minN = 0;
	int min = 100;
	for(int i = 0; i < SC_N; i++){
		if(min > pTile[SC_Nt][i] && pTile[SC_Nt][i] != -1){
			min = pTile[SC_Nt][i];
			minN = i;
		}
	}
	int now = minN;

	SC_ans[SC_Nt] = now;
	for(int i = SC_Nt; i > 1; i--){
		now = parentTile[i][now];
		SC_ans[i-1] = now;
	}

	SC_output();
}